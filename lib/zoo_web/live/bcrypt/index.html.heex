<div class="px-4 py-12 mx-auto max-w-screen-xl space-y-8">
  <div class="space-y-4" x-data="{input: null}">
    <h2 class="text-lg font-bold sm:text-xl">Bcrypt Hash Generator and Checker Tool</h2>

    <form phx-change="input_changed">
      <div class="grid gap-4 sm:grid-cols-2 md:grid-cols-2">
        <div class="relative block">
          <div class="">
            <label class="sr-only" for="message">Input</label>

            <textarea class="w-full p-3 text-sm border-gray-200 rounded-lg" placeholder="Input text" rows="3" id="input" name="input" x-model="input"><%= @input %> </textarea>
            <%= if @error do %>
            <div class="flex items-center justify-between p-4 text-red-700 border rounded border-red-900/10 bg-red-50 absolute w-full bottom-0" role="alert">
              <strong class="text-sm font-medium"> <%= @error %> </strong>
            </div>
            <% end %>

            <%= if @success do %>
            <div class="flex items-center justify-between p-4 text-green-700 border rounded border-green-900/10 bg-green-50 absolute w-full bottom-0" role="alert">
              <strong class="text-sm font-medium"> <%= @success %> </strong>
            </div>
            <% end %>

          </div>
        </div>

        <div class="relative block overflow-hidden">
          <div class="">

            <label class="sr-only" for="message">Output</label>
            <textarea class="w-full p-3 text-sm border-gray-200 rounded-lg" placeholder="Your output here" rows="3" name="hash" id="output"><%= @hash %></textarea>

            <div id="message" class="flex items-center justify-between py-1 px-8 text-green-700 border rounded border-green-900/10 absolute bg-green-50 bottom-0 right-0 opacity-0" role="alert">
              <strong class="text-sm font-medium"> Copied! </strong>
            </div>
          </div>
        </div>
      </div>

      <div class="py-4">
        <div class="col-span-12">
          <span class="font-medium text-gray-700">Prefix</span>
          <label class="px-4 py-2">
            <input
              type="radio"
              id="prefix-2a"
              name="prefix"
              value="2a"
              class="w-5 h-5 bg-white border-gray-200 rounded-md shadow-sm mr-2"
              checked={@prefix == "2a"}
              />2a </label>

          <label class="px-4 py-2 ml-4">
            <input
              type="radio"
              id="prefix-2b"
              name="prefix"
              value="2b"
              class="w-5 h-5 bg-white border-gray-200 rounded-md shadow-sm mr-2"
              checked={@prefix != "2a"}
              />2b </label>

        </div>

        <div class="col-span-12 relative">
          <label class="font-medium text-gray-700 mr-2" for="log-rounds">Log rounds </label>

          <input class="p-3 mt-1 text-sm border-2 border-gray-200 rounded" id="log-rounds" name="log_rounds" type="number" value={@log_rounds} />
        </div>

      </div>
    </form>
    <div>
      <button class="inline-block px-12 py-3 text-sm font-medium text-white bg-indigo-600 border border-indigo-600 rounded active:text-indigo-500 hover:bg-transparent hover:text-indigo-600 focus:outline-none focus:ring" phx-click="hash">
        Hash
      </button>

      <button class="inline-block px-12 py-3 text-sm font-medium text-indigo-600 border border-indigo-600 rounded hover:bg-indigo-600 hover:text-white active:bg-indigo-500 focus:outline-none focus:ring" phx-click="verify">
        Verify
      </button>

      <button class="inline-block px-12 py-3 text-sm font-medium text-indigo-600 border border-indigo-600 rounded hover:bg-indigo-600 hover:text-white active:bg-indigo-500 focus:outline-none focus:ring" x-on:click="copy('#output')">
        Copy output
      </button>
    </div>
  </div>
</div>
<script>
  function copy (target) {
      const copyText = document.querySelector(target);
      copyText.select();
      copyText.setSelectionRange(0, 99999); // For mobile devices
      // Copy the text inside the text field
      navigator.clipboard.writeText(copyText.value);

      document.querySelector("#message").classList.remove("opacity-0")
      document.querySelector("#message").classList.add("opacity-100")
      setTimeout(() => {
          document.querySelector("#message").classList.add("opacity-0")
      }, 1000)
  };

</script>

<div class="p-4 mx-auto my-12 max-w-screen-xl ">

  <div class="p-10 border rounded border-indigo-500  bg-indigo-100">
    <span class="inline-flex text-lg font-medium gap-1.5">What does Bcrypt prefix mean?</span>
      <div class="mt-6">
        <p><strong>$2a$</strong></p>

        <p class="mb-4">The original BCrypt specification did not define how to handle non-ASCII characters, or how to handle a null terminator</p>

        <p class="my-4"><strong>$2x$, $2y$</strong> <em>(June 2011)</em></p>

        <p class="my-4">A bug was discovered in <a href="https://pear.php.net/package/Crypt_Blowfish" rel="noreferrer">crypt_blowfish</a><sup><a href="https://archive.fo/CnnUz" rel="noreferrer">ðŸ•—</a></sup>, a PHP implementation of BCrypt. It was mis-handling characters with the 8th bit set.</p>

        <p class="my-4">They suggested that system administrators update their existing password database, replacing <code>$2a$</code> with <code>$2x$</code>, to indicate that those hashes are bad (and need to use the old broken algorithm). They also suggested the idea of having crypt_blowfish emit <code>$2y$</code> for hashes generated by the fixed algorithm. Nobody else, including canonical OpenBSD, adopted the idea of <code>2x</code>/<code>2y</code>. <a href="http://seclists.org/oss-sec/2011/q2/632" rel="noreferrer">This version marker was was limited to crypt_blowfish</a><sup><a href="https://archive.fo/tqDGj" rel="noreferrer">ðŸ•—</a></sup>.</p>

        <p class="my-4">The versions <strong>$2x$</strong> and <strong>$2y$</strong> are not &quot;better&quot; or &quot;stronger&quot; than <strong>$2a$</strong>. They are remnants of one particular buggy implementation of BCrypt.</p>

        <p class="my-4"><strong>$2b$</strong> <em>(February 2014)</em></p>

        <p class="my-4">A bug was discovered in the OpenBSD implementation of BCrypt. They were storing the length of their strings in an <code>unsigned char</code>. If a password was longer than 255 characters, it would overflow and wrap at 255.</p>

        <p class="my-4">
          The only people who need to care about 2x and 2y are those you may have been using crypt_blowfish. And the only people who need to care about 2b are those who may have been running OpenBSD.
        </p>

      </div>

      <p class="mt-4 text-sm text-gray-500 lg:mt-0">Source: <a href="https://stackoverflow.com/questions/15733196/where-2x-prefix-are-used-in-bcrypt">Stack overflow</a></p>
</div>
</div>
