<div class="px-4 py-12 mx-auto max-w-screen-xl space-y-8" x-data="{}">
  <div class="space-y-4">
    <h2 class="text-lg font-bold sm:text-xl">Convert HTML to Text or Markdown</h2>


    <div class="grid gap-4 sm:grid-cols-2 md:grid-cols-2">
      <div class="relative block">
        <div class="">
          <label class="sr-only" for="message">Input</label>

          <textarea class="w-full p-3 text-sm border-gray-200 rounded-lg" placeholder="Input text" rows="16" id="input" name="input"><h2>Tarams</h2>
            <p dir="auto">Schema is just a map and it can be nested. Each field is defined as</p>
            <p dir="auto"><code>[field_name]: [field_spec, ...]</code></p>
            <p dir="auto">Or short form</p>
            <p dir="auto"><code>[field_name]: [type]</code></p>
            <p dir="auto">Field specs is a keyword list thay may include:</p>
            <ul dir="auto">
              <li><code>type</code> is required, <code>Tarams</code> support same data type as <code>Ecto</code>. I borrowed code from Ecto</li>
              <li><code>default</code>: default value or default function</li>
              <li><code>cast_func</code>: custom cast function</li>
              <li><code>number, format, length, in, not_in, func, required, each</code> are available validations</li>
              <li><code>from</code>: use value from another field</li>
              <li><code>as</code>: alias key you will receive from <code>Tarams.cast</code> if casting is succeeded</li>
          </ul></textarea>
        </div>
      </div>

      <div class="relative block overflow-hidden">
        <div class="">

          <label class="sr-only" for="message">Output</label>
          <textarea class="w-full p-3 text-sm border-gray-200 rounded-lg" placeholder="Your output here" rows="16" id="output" readonly></textarea>

          <div id="message" class="flex items-center justify-between py-1 px-8 text-green-700 border rounded border-green-900/10 absolute bg-green-50 bottom-0 right-0 opacity-0" role="alert">
            <strong class="text-sm font-medium"> Copied! </strong>
          </div>
        </div>
      </div>
    </div>

    <div>
      <button class="inline-block px-12 py-3 text-sm font-medium text-white bg-indigo-600 border border-indigo-600 rounded active:text-indigo-500 hover:bg-transparent hover:text-indigo-600 focus:outline-none focus:ring" @click="htmlToMarkdown()">
        HTML to Markdown
      </button>

      <button class="inline-block px-12 py-3 text-sm font-medium text-indigo-600 border border-indigo-600 rounded hover:bg-indigo-600 hover:text-white active:bg-indigo-500 focus:outline-none focus:ring" @click="htmlToText()">
        HTML to text
      </button>

      <button class="inline-block px-12 py-3 text-sm font-medium text-indigo-600 border border-indigo-600 rounded hover:bg-indigo-600 hover:text-white active:bg-indigo-500 focus:outline-none focus:ring" x-on:click="copy('#output')">
        Copy output
      </button>
    </div>
  </div>
</div>

<script src="https://unpkg.com/turndown/dist/turndown.js"></script>

<script>

  function htmlToMarkdown(){
      const options = {
          bulletListMarker: "-",
          codeBlockStyle: "fenced"
      }
      const html = document.getElementById("input").value
      const turndownService = new TurndownService(options)
      const markdown = turndownService.turndown(html)
      document.getElementById("output").value = markdown
  }

  function htmlToText(){
      const html = document.getElementById("input").value
      const div = document.createElement("div")
      div.innerHTML = html
      document.getElementById("output").value = div.innerText
  }


  function copy (target) {
      const copyText = document.querySelector(target);
      copyText.select();
      copyText.setSelectionRange(0, 99999); // For mobile devices
      // Copy the text inside the text field
      navigator.clipboard.writeText(copyText.value);

      document.querySelector("#message").classList.remove("opacity-0")
      document.querySelector("#message").classList.add("opacity-100")
      setTimeout(() => {
          document.querySelector("#message").classList.add("opacity-0")
      }, 1000)
  };

</script>
